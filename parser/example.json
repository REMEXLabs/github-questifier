{"repository":"jannikko/github-questifier","files":[{"path":"server/routes/index.js","content":"var express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n"},{"path":"server/routes/repository.js","content":"var express = require('express');\nvar https = require(\"https\");\nvar router = express.Router();\nvar atob = require('atob');\nvar async = require('async');\nvar url = require('url');\n\nvar valid_filename_extensions = ['.js'];\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n    var owner = req.query.owner,\n        repo = req.query.repo,\n        repo_id = owner + '/' + repo;\n    var filtered_files;\n    var list_of_files = {\n        'repository': repo_id,\n        'files': []\n    };\n    var host = 'api.github.com',\n        path = '/repos/' + repo_id + '/git/trees/master?recursive=1';\n\n    async.series([\n            function(series_callback) {\n                request_api(host, path, function(files_obj) {\n                    var files = files_obj.tree;\n                    filtered_files = files.filter(is_valid_file);\n                    series_callback();\n                });\n            },\n\n            function(series_callback) {\n                async.each(filtered_files, function(file, each_callback) {\n                    var content_url = url.parse(file.url);\n                    host = content_url.host;\n                    path = content_url.path;\n                    request_api(host, path, function(contents_obj) {\n                        list_of_files.files.push({\n                            'path': file.path,\n                            'content': atob(contents_obj.content)\n                        });\n                        each_callback();\n                    });\n                }, function(err) {\n                    if (err) {\n                        console.log('A file failed to process');\n                    }\n                    series_callback();\n                });\n            }\n        ],\n        function(err, results) {\n            res.writeHead(200, {\n                'Content-Type': 'application/json'\n            });\n            res.end(JSON.stringify(list_of_files));\n            next();\n        });\n});\n\nfunction is_valid_file(file) {\n    for (var i = valid_filename_extensions.length - 1; i >= 0; i--) {\n        if (file.path.endsWith(valid_filename_extensions[i]) && file.type == 'blob') {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction request_api(host, path, callback) {\n    var options = {\n        headers: {\n            'User-Agent': 'github-questifier'\n        },\n        host: host,\n        path: path\n    };\n    var request = https.get(options, function(resp) {\n        var data = \"\";\n        resp.setEncoding('utf8');\n        resp.on('data', function(chunk) {\n            data += chunk;\n        });\n        resp.on('end', function() {\n            callback(JSON.parse(data));\n        });\n    });\n    request.end();\n    request.on('error', function(e) {\n        console.log(e);\n    });\n}\n\nmodule.exports = router;"},{"path":"server/app.js","content":"var express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar bodyParser = require('body-parser');\n\nvar routes = require('./routes/index');\nvar repository = require('./routes/repository');\n\nvar app = express();\n\n/*1: a block comment directly followed by a inline comment*/\n//1b: this is the following inline comment\napp.set('views', path.join(__dirname, 'views'));\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.use('/', routes);\napp.use('/repository', repository);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n/*2: a block comment directly followed by another block comment*/\n/*2b: this one is the follower*/\nvar err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.end('error');\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n  res.status(err.status || 500);\n  res.end('error');\n});\n\n\nmodule.exports = app;\n/*3a:start of my block comment\n3b:it still keeps going\n3c:and eventually ends at the end of the file*/"}]}